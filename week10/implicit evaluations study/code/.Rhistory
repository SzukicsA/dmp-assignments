ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.1,
boundary = 0.5,
fill = "white",
colour = "black")
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.1,
boundary = 0.5,
fill = "white",
colour = "black") +
labs(x = "Frequency",
y = "AMP Score",
title = "Distribution of AMP Score")
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.1,
boundary = 0.5,
fill = "wheat",
colour = "black") +
labs(x = "Frequency",
y = "AMP Score",
title = "Distribution of AMP Score")
View(data_processed_after_exclusions)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 0.1,
boundary = 0.5,
fill = "wheat",
colour = "black") +
labs(x = "Frequency",
y = "AMP Score",
title = "Distribution of AMP Score")
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 0.3,
boundary = 0.5,
fill = "wheat",
colour = "black") +
labs(x = "Frequency",
y = "Evaluation",
title = "Distribution of Mean Evaluation")
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 0.3,
boundary = 0.5,
fill = "wheat",
colour = "black") +
labs(x = "Frequency",
y = "Evaluation",
title = "Distribution of Mean Evaluation") +
theme_minimal()
View(data_selfreport_mean_score)
View(data_selfreport_mean_score)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 053,
boundary = 0.5,
fill = "wheat",
colour = "black") +
labs(x = "Frequency",
y = "Evaluation",
title = "Distribution of Mean Evaluation") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 0.5,
boundary = 0.5,
fill = "wheat",
colour = "black") +
labs(x = "Frequency",
y = "Evaluation",
title = "Distribution of Mean Evaluation") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 0.5,
boundary = -0.5,
fill = "wheat",
colour = "black") +
labs(x = "Frequency",
y = "Evaluation",
title = "Distribution of Mean Evaluation") +
theme_minimal()
library("scales")
install.packages("scales")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE)) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE))
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 2)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 0.5,
boundary = 0.5,
fill = "wheat",
colour = "black") +
labs(x = "Frequency",
y = "Evaluation",
title = "Distribution of Mean Evaluation") +
xlim(7),
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 0.5,
boundary = 0.5,
fill = "wheat",
colour = "black") +
labs(x = "Frequency",
y = "Evaluation",
title = "Distribution of Mean Evaluation") +
xlim(x = 7),
ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation))+
geom_point()
ggplot(data                 = vpn,
aes(x                = as.factor(Age))) +
theme_bw()+
theme(panel.border        = element_blank(),
panel.grid.major    = element_blank(),
panel.grid.minor    = element_blank(),
axis.line           = element_line(colour = "black"))+
geom_bar(aes(fill         = Sex),
position         = position_dodge2(preserve = "single")) +
scale_y_continuous(breaks = seq(30,0),
labels = abs(seq(30,0)))+
labs(title                = "Age distribution of the sample",
x                    = "Age",
y                    = "Participants",
col                  = "Sex")
cogvor  <- read.csv("cogvordata.csv")
vpn     <- read.csv("cogvorvpn.csv")
view(cogvor)
view(vpn)
vpn$Sex             <- factor(vpn$Sex,        levels = c("Female", "Male"))
vpn$Handedness      <- factor(vpn$Handedness, levels = c("l", "r"))
vpn$Education       <- factor(vpn$Education,  levels = c("Matura", "Berufsmatura", "Bachelor", "Master"))
library("broom")       # for tidy lm results
library("broom.mixed") # for tidy lmer results
ggplot(data                 = vpn,
aes(x                = as.factor(Age))) +
theme_bw()+
theme(panel.border        = element_blank(),
panel.grid.major    = element_blank(),
panel.grid.minor    = element_blank(),
axis.line           = element_line(colour = "black"))+
geom_bar(aes(fill         = Sex),
position         = position_dodge2(preserve = "single")) +
scale_y_continuous(breaks = seq(30,0),
labels = abs(seq(30,0)))+
labs(title                = "Age distribution of the sample",
x                    = "Age",
y                    = "Participants",
col                  = "Sex")
ggplot(data                 = vpn,
aes(x                = Education)) +
theme_bw()+
theme(panel.border        = element_blank(),
panel.grid.major    = element_blank(),
panel.grid.minor    = element_blank(),
axis.line           = element_line(colour = "black"))+
geom_bar(aes(fill         = Sex),
position         = position_dodge(preserve  = "single"))+
scale_y_continuous(breaks = seq(30,0),
labels = abs(seq(30,0)))+
labs(title                = "Education distribution of the sample",
x                    = "Education",
y                    = "Participant",
col                  = "Sex")
ggplot(data                 = vpn,
aes(x                = as.factor(Education),
fill             = Sex),
xlab                 = "Age") +
geom_bar(data             = subset(vpn,
Sex               == "Female")) +
geom_bar(data             = subset(vpn,
Sex               == "Male"),
aes(y            = ..count..*(-1))) +
scale_y_continuous(breaks = seq(-10,30,1),
labels = abs(seq(-10,30,1))) +
coord_flip()+
theme_bw()+
theme(panel.border        = element_blank(),
panel.grid.major    = element_blank(),
panel.grid.minor    = element_blank(),
axis.line           = element_line(colour = "black"))+
labs(title                = "Education distribution of the sample",
x                    = "Education",
y                    = "Participants",
col                  = "Sex")
cogvor  <- read.csv("cogvordata.csv")
vpn     <- read.csv("cogvorvpn.csv")
view(cogvor)
library("haven")
library("tidyverse")
library("knitr")       # for knitting RMarkdown
library("kableExtra")  # for making nice tables
library("janitor")     # for cleaning column names
cogvor  <- read.csv("cogvordata.csv")
cogvor  <- read.csv("cogvordata.csv")
cogvor  <- read.csv("cogvordata.csv")
vpn     <- read.csv("cogvorvpn.csv")
view(cogvor)
ggplot(data_processed_after_exclusions,
aes(x              = AMP_score,
y              = mean_evaluation)) +
geom_point(position     = "jitter",
size         = 1,
alpha        = 0.8) +
geom_smooth(method    = lm,
se        = FALSE) +
labs(title            = "Accuracy by Age",
y                  = "Mean evaluation",
x                  = "AMP Score")#,
ggplot(data_processed_after_exclusions,
aes(x              = AMP_score,
y              = mean_evaluation)) +
geom_point(position     = "jitter",
size         = 1,
alpha        = 0.8) +
geom_smooth(method    = lm,
se        = TRUE) +
labs(title            = "Accuracy by Age",
y                  = "Mean evaluation",
x                  = "AMP Score")#,
ggplot(data_processed_after_exclusions,
aes(x              = AMP_score,
y              = mean_evaluation)) +
geom_point(position     = "jitter",
size         = 3,
alpha        = 0.8) +
geom_smooth(method    = lm,
se        = TRUE) +
labs(title            = "Accuracy by Age",
y                  = "Mean evaluation",
x                  = "AMP Score")#,
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(AMP_score, na.rm = TRUE),
SD = sd(AMP_score, na.rm = TRUE),
n = n())
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
# overall self-reported evaluations
dat_amp_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(AMP_score, na.rm = TRUE),
SD = sd(AMP_score, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_amp_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(AMP_score, na.rm = TRUE),
SD = sd(AMP_score, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_amp_ratings,
dat_amp_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
library(ggExtra)
install.packages("ggExtra")
library(ggExtra)
