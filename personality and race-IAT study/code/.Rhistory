summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# List of subscales
subscales <- c("a", "c", "e", "n", "o")
num_items <- c(9, 9, 8, 8, 10)
# Empty list to store Cronbach's alpha values
cronbach_alphas <- list()
# Loop to compute Cronbach's alpha for each subscale
for (i in seq_along(subscales)) {
# Generate column names for the current subscale
selected_columns <- paste0("bfi_", subscales[i], 1:num_items[i])
# Filter rows where all items in the subscale are complete (no NAs)
# Using a standard subsetting approach instead of all_of
dat_subscale <- data_processed_after_exclusions[, selected_columns, drop = FALSE] |>
na.omit()
# Check if the subscale has sufficient data for alpha calculation
if(nrow(dat_subscale) > 1) {
# Compute Cronbach's alpha
alpha_subscale <- cronbach.alpha(dat_subscale)$alpha
} else {
alpha_subscale <- NA  # Assign NA if not enough data
}
# Store the alpha coefficient in the list
cronbach_alphas[[subscales[i]]] <- alpha_subscale
}
# Print Cronbach's alpha values
print(cronbach_alphas)
# Theme for all plots
# theme_set()
#BFI A
ggplot(data_processed_after_exclusions, aes(x = mean_a)) +
geom_histogram(position = "dodge",
binwidth = .1,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(mean_a, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(1, 6), ylim = c(1, 15)) +
labs(title           = "BFI mean score",
subtitle        = "Subscale A",
x               = "Mean score",
y               = "Count") +
theme_classic() +
# Make the axis label bold
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
#BFI C
ggplot(data_processed_after_exclusions, aes(x = mean_c)) +
geom_histogram(position = "dodge",
binwidth = .1,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(mean_c, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(1, 6), ylim = c(1, 15)) +
labs(title           = "BFI mean score",
subtitle        = "Subscale C",
x               = "Mean score",
y               = "Count") +
theme_test() +
# Make the axis label bold
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
#BFI  E
ggplot(data_processed_after_exclusions, aes(x = mean_e)) +
geom_histogram(position = "dodge",
binwidth = .1,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(mean_e, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(1, 6), ylim = c(1, 15)) +
labs(title           = "BFI mean score",
subtitle        = "Subscale E",
x               = "Mean score",
y               = "Count") +
theme_ggdist() +
# Make the axis label bold
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
#BFI N
ggplot(data_processed_after_exclusions, aes(x = mean_n)) +
geom_histogram(position = "dodge",
binwidth = .1,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(mean_n, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(1, 6), ylim = c(1, 15)) +
labs(title           = "BFI mean score",
subtitle        = "Subscale N",
x               = "Mean score",
y               = "Count") +
theme_clean() +
# Make the axis label bold
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
#BFI O
ggplot(data_processed_after_exclusions, aes(x = mean_o)) +
geom_histogram(position = "dodge",
binwidth = .1,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(mean_o, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(1, 6), ylim = c(1, 15)) +
labs(title           = "BFI mean score",
subtitle        = "Subscale O",
x               = "Mean score",
y               = "Count") +
theme_calc() +
# Make the axis label bold
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
#IAT D
ggplot(data_processed_after_exclusions, aes(x = D)) +
geom_histogram(position = "dodge",
binwidth = .05,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(D, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(-1, .5), ylim = c(1, 15)) +
labs(title           = "Implicit Association Test",
subtitle        = "Greenwald \"D\" score",
x               = "D score",
y               = "Count") +
theme_classic() +
# Labs
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(ltm)
library(scales)
library(PupillometryR)
library(palmerpenguins)
library(ggdist)
library(ggExtra)
library(ggrepel)
library(remotes)
library(ggthemes)
library(ggsci)
# devtools::install_github("psyteachr/introdataviz")
# Loading data
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
# Loading only subject to be included
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# List of subscales
subscales <- c("a", "c", "e", "n", "o")
num_items <- c(9, 9, 8, 8, 10)
# Empty list to store Cronbach's alpha values
cronbach_alphas <- list()
# Loop to compute Cronbach's alpha for each subscale
for (i in seq_along(subscales)) {
# Generate column names for the current subscale
selected_columns <- paste0("bfi_", subscales[i], 1:num_items[i])
# Filter rows where all items in the subscale are complete (no NAs)
# Using a standard subsetting approach instead of all_of
dat_subscale <- data_processed_after_exclusions[, selected_columns, drop = FALSE] |>
na.omit()
# Check if the subscale has sufficient data for alpha calculation
if(nrow(dat_subscale) > 1) {
# Compute Cronbach's alpha
alpha_subscale <- cronbach.alpha(dat_subscale)$alpha
} else {
alpha_subscale <- NA  # Assign NA if not enough data
}
# Store the alpha coefficient in the list
cronbach_alphas[[subscales[i]]] <- alpha_subscale
}
# Print Cronbach's alpha values
print(cronbach_alphas)
# Theme for all plots
# theme_set()
#BFI A
ggplot(data_processed_after_exclusions, aes(x = mean_a)) +
geom_histogram(position = "dodge",
binwidth = .1,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(mean_a, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(1, 6), ylim = c(1, 15)) +
labs(title           = "BFI mean score",
subtitle        = "Subscale A",
x               = "Mean score",
y               = "Count") +
theme_classic() +
# Make the axis label bold
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
#BFI C
ggplot(data_processed_after_exclusions, aes(x = mean_c)) +
geom_histogram(position = "dodge",
binwidth = .1,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(mean_c, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(1, 6), ylim = c(1, 15)) +
labs(title           = "BFI mean score",
subtitle        = "Subscale C",
x               = "Mean score",
y               = "Count") +
theme_test() +
# Make the axis label bold
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
#BFI  E
ggplot(data_processed_after_exclusions, aes(x = mean_e)) +
geom_histogram(position = "dodge",
binwidth = .1,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(mean_e, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(1, 6), ylim = c(1, 15)) +
labs(title           = "BFI mean score",
subtitle        = "Subscale E",
x               = "Mean score",
y               = "Count") +
theme_ggdist() +
# Make the axis label bold
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
#BFI N
ggplot(data_processed_after_exclusions, aes(x = mean_n)) +
geom_histogram(position = "dodge",
binwidth = .1,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(mean_n, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(1, 6), ylim = c(1, 15)) +
labs(title           = "BFI mean score",
subtitle        = "Subscale N",
x               = "Mean score",
y               = "Count") +
theme_clean() +
# Make the axis label bold
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
#BFI O
ggplot(data_processed_after_exclusions, aes(x = mean_o)) +
geom_histogram(position = "dodge",
binwidth = .1,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(mean_o, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(1, 6), ylim = c(1, 15)) +
labs(title           = "BFI mean score",
subtitle        = "Subscale O",
x               = "Mean score",
y               = "Count") +
theme_calc() +
# Make the axis label bold
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
#IAT D
ggplot(data_processed_after_exclusions, aes(x = D)) +
geom_histogram(position = "dodge",
binwidth = .05,
fill     = "lightblue",
color    = "black")+
geom_density(alpha = 0.5, fill = "orange") +
geom_vline(aes(xintercept = mean(D, na.rm = TRUE)),
linetype = "dashed", color = "red", size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 15)) +
coord_cartesian(xlim = c(-1, .5), ylim = c(1, 15)) +
labs(title           = "Implicit Association Test",
subtitle        = "Greenwald \"D\" score",
x               = "D score",
y               = "Count") +
theme_classic() +
# Labs
theme(plot.title    = element_text(color = "#0099F8", size = 16, face = "bold"),
plot.subtitle = element_text(size = 10, face = "bold"),
axis.title.x  = element_text(face = "bold"),
axis.title.y  = element_text(face = "bold"))
# Assuming your dataframe is named 'data_processed'
# And it contains 'D' for IAT scores and 'mean_a', 'mean_c', 'mean_e', 'mean_n', 'mean_o' for BFI subscales
# Selecting the relevant columns and creating a new dataframe
correlation_data <- data_processed_after_exclusions |>
select(D, mean_a, mean_c, mean_e, mean_n, mean_o)
# Ensuring the necessary columns are present in the data frame
required_columns <- c("D", "mean_a", "mean_c", "mean_e", "mean_n", "mean_o")
if(all(required_columns %in% names(data_processed_after_exclusions))) {
# Calculating the correlation matrix
correlation_matrix <- cor(data_processed_after_exclusions[required_columns],
use = "pairwise.complete.obs", method = "pearson")
# Printing the correlation matrix
print(correlation_matrix)
} else {
cat("One or more required columns are missing from the data frame.")
}
# Ensuring the necessary columns are present in the data frame
required_columns <- c("D", "mean_a", "mean_c", "mean_e", "mean_n", "mean_o")
if(all(required_columns %in% names(data_processed_after_exclusions))) {
# Calculating the correlation matrix
correlation_matrix <- cor(data_processed_after_exclusions[required_columns],
use = "pairwise.complete.obs", method = "pearson")
# Printing the correlation matrix
print(correlation_matrix)
} else {
cat("One or more required columns are missing from the data frame.")
} |>
kable() |>
kable_classic(full_width = FALSE)
# Ensuring the necessary columns are present in the data frame
required_columns <- c("D", "mean_a", "mean_c", "mean_e", "mean_n", "mean_o")
if(all(required_columns %in% names(data_processed_after_exclusions))) {
# Calculating the correlation matrix
correlation_matrix <- cor(data_processed_after_exclusions[required_columns],
use = "pairwise.complete.obs", method = "pearson")
# Printing the correlation matrix
#   print(correlation_matrix)
# } else {
#   cat("One or more required columns are missing from the data frame.")
# } |>
#   kable() |>
#   kable_classic(full_width = FALSE)
kable(correlation_matrix) %>%
kable_classic(full_width = FALSE)
} else {
cat("One or more required columns are missing from the data frame.")
}
# Ensuring the necessary columns are present in the data frame
required_columns <- c("D", "mean_a", "mean_c", "mean_e", "mean_n", "mean_o")
if(all(required_columns %in% names(data_processed_after_exclusions))) {
# Calculating the correlation matrix
correlation_matrix <- cor(data_processed_after_exclusions[required_columns],
use = "pairwise.complete.obs", method = "pearson")
# Printing the correlation matrix
print(correlation_matrix)
} else {
cat("One or more required columns are missing from the data frame.")
} |>
kable() |>
kable_classic(full_width = FALSE)
# Ensuring the necessary columns are present in the data frame
required_columns <- c("D", "mean_a", "mean_c", "mean_e", "mean_n", "mean_o")
if(all(required_columns %in% names(data_processed_after_exclusions))) {
# Calculating the correlation matrix
correlation_matrix <- cor(data_processed_after_exclusions[required_columns],
use = "pairwise.complete.obs", method = "pearson")
# Table of matrix correlation
kable(correlation_matrix) %>%
kable_classic(full_width = FALSE)
} else {
cat("One or more required columns are missing from the data frame.")
}
# Ensuring the necessary columns are present in the data frame
required_columns <- c("D", "mean_a", "mean_c", "mean_e", "mean_n", "mean_o")
if(all(required_columns %in% names(data_processed_after_exclusions))) {
# Calculating the correlation matrix
correlation_matrix <- cor(data_processed_after_exclusions[required_columns],
use = "pairwise.complete.obs", method = "pearson")
# Rounding the correlation matrix to two decimal places
correlation_matrix_rounded <- round(correlation_matrix, 2)
# Formatting and printing the rounded correlation matrix as a table
kable(correlation_matrix_rounded) %>%
kable_classic(full_width = FALSE)
} else {
cat("One or more required columns are missing from the data frame.")
}
required_columns <- c("D", "mean_a", "mean_c", "mean_e", "mean_n", "mean_o")
if(all(required_columns %in% names(data_processed_after_exclusions))) {
# Calculating the correlation matrix
correlation_matrix <- cor(data_processed_after_exclusions[required_columns],
use = "pairwise.complete.obs", method = "pearson")
# Table of matrix correlation
kable(correlation_matrix) %>%
kable_classic(full_width = FALSE)
} else {
cat("One or more required columns are missing from the data frame.")
}
# Ensuring the necessary columns are present in the data frame
required_columns <- c("D", "mean_a", "mean_c", "mean_e", "mean_n", "mean_o")
if(all(required_columns %in% names(data_processed_after_exclusions))) {
# Calculating the correlation matrix
correlation_matrix <- cor(data_processed_after_exclusions[required_columns],
use = "pairwise.complete.obs", method = "pearson")
# Rounding the correlation matrix to two decimal places
correlation_matrix_rounded <- round(correlation_matrix, 2)
# Formatting and printing the rounded correlation matrix as a table
kable(correlation_matrix_rounded) %>%
kable_classic(full_width = FALSE)
} else {
cat("One or more required columns are missing from the data frame.")
}
# Ensuring the necessary columns are present in the data frame
required_columns <- c("D", "mean_a", "mean_c", "mean_e", "mean_n", "mean_o")
if(all(required_columns %in% names(data_processed_after_exclusions))) {
# Calculating the correlation matrix
correlation_matrix <- cor(data_processed_after_exclusions[required_columns],
use = "pairwise.complete.obs", method = "pearson")
# Rounding the correlation matrix to two decimal places
correlation_matrix_rounded <- round(correlation_matrix, 2)
# Formatting and printing the rounded correlation matrix as a table
kable(correlation_matrix_rounded) %>%
kable_classic(full_width = FALSE)
} else {
cat("One or more required columns are missing from the data frame.")
}
install.packages("report")
install.packages("remotes")
remotes::install_github("easystats/report") # You only need to do that once
install.packages("remotes")
